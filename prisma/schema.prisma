generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model account {
  id           Int       @id(map: "PK_account") @default(autoincrement())
  login_email  String    @unique(map: "UK_login_email") @db.NVarChar(255)
  microsoft_id String?   @db.NVarChar(255)
  first_name   String    @db.NVarChar(255)
  last_name    String    @db.NVarChar(255)
  is_admin     Boolean   @default(false, map: "DF_account_is_admin")
  last_login   DateTime? @db.Date
  member       member?
}

model current_promotion_strategy {
  member_id             Int
  promotion_strategy_id Int
  member                member             @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_current_promotion_strategy_member_id")
  promotion_strategy    promotion_strategy @relation(fields: [promotion_strategy_id], references: [id], onUpdate: NoAction, map: "FK_current_promotion_strategy_promotion_strategy_id")

  @@id([member_id, promotion_strategy_id], map: "PK_current_promotion_strategy")
}

model desired_partnership {
  id          Int        @id(map: "PK_desired_partnership")
  member_id   Int        @unique(map: "UK_desired_partnership_member_id")
  type_id     Int?
  scope_id    Int?
  description String?    @db.VarChar(Max)
  member      member     @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_desired_partnership_member_id")
  org_scope   org_scope? @relation(fields: [scope_id], references: [id], onUpdate: SetNull, map: "FK_desired_partnership_scope_id")
  org_type    org_type?  @relation(fields: [type_id], references: [id], onUpdate: SetNull, map: "FK_desired_partnership_type_id")
}

model desired_promotion_strategy {
  member_id             Int
  promotion_strategy_id Int
  member                member             @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_desired_promotion_strategy_member_id")
  promotion_strategy    promotion_strategy @relation(fields: [promotion_strategy_id], references: [id], onUpdate: NoAction, map: "FK_desired_promotion_strategy_promotion_strategy_id")

  @@id([member_id, promotion_strategy_id], map: "PK_desired_promotion_strategy")
}

model faculty {
  id      Int      @id(map: "PK_faculty") @default(autoincrement())
  name_en String   @db.NVarChar(255)
  name_fr String   @db.NVarChar(255)
  member  member[]
}

model has_keyword {
  member_id  Int
  keyword_id Int
  keyword    keyword @relation(fields: [keyword_id], references: [id], onDelete: Cascade, map: "FK_has_keyword_keyword_id")
  member     member  @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_has_keyword_member_id")

  @@id([member_id, keyword_id], map: "PK_has_keyword")
  @@unique([member_id, keyword_id], map: "UK_has_keyword")
}

model insight {
  id               Int       @id(map: "PK_insight") @default(autoincrement())
  member_id        Int       @unique(map: "UK_insight_member_id")
  interview_date   DateTime? @db.Date
  about_member     String?   @db.NVarChar(Max)
  about_promotions String?   @db.NVarChar(Max)
  dream            String?   @db.NVarChar(Max)
  how_can_we_help  String?   @db.NVarChar(Max)
  admin_notes      String?   @db.NVarChar(Max)
  other_notes      String?   @db.NVarChar(Max)
  member           member    @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_insight_member_id")
}

model keyword {
  id          Int           @id(map: "PK_keyword") @default(autoincrement())
  name_en     String?       @db.NVarChar(200)
  name_fr     String?       @db.NVarChar(200)
  has_keyword has_keyword[]

  @@unique([name_en, name_fr], map: "UK_keyword_names")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model legacy {
  ID                        Int
  first_name                String?   @db.NVarChar(255)
  last_name                 String?   @db.NVarChar(255)
  business_name             String?   @db.NVarChar(255)
  date_joined               DateTime? @db.DateTime
  interview_date            DateTime? @db.DateTime
  date_in_active            DateTime? @db.DateTime
  email                     String?   @db.NVarChar(255)
  address                   String?   @db.NVarChar(255)
  city                      String?   @db.NVarChar(255)
  province                  String?   @db.NVarChar(255)
  country                   String?   @db.NVarChar(255)
  postal_code               String?   @db.NVarChar(255)
  business_phone            String?   @db.NVarChar(255)
  mobile_phone              String?   @db.NVarChar(255)
  interview_notes           String?   @db.NVarChar(Max)
  is_active                 Boolean
  category                  Int?
  keywords_EN               String?   @db.NVarChar(Max)
  keywords_FR               String?   @db.NVarChar(Max)
  problems_EN               String?   @db.NVarChar(Max)
  problems_FR               String?   @db.NVarChar(Max)
  dream                     String?   @db.NVarChar(Max)
  notes                     String?   @db.NVarChar(Max)
  how_can_we_help           String?   @db.NVarChar(Max)
  faculty                   Int?
  partnerships_1_notes      String?   @db.NVarChar(Max)
  partnerships_2_notes      String?   @db.NVarChar(Max)
  partnerships_3_notes      String?   @db.NVarChar(Max)
  partnerships_future_notes String?   @db.NVarChar(Max)
  future_promotion_notes    String?   @db.NVarChar(Max)
  indicators_frequency      Int?
  other_comments            String?   @db.NVarChar(Max)
  interviewer_notes         String?   @db.NVarChar(Max)

  @@ignore
}

model member {
  id                         Int                          @id(map: "PK_member") @default(autoincrement())
  account_id                 Int                          @unique(map: "UK_account_id")
  faculty_id                 Int?
  type_id                    Int?
  work_email                 String?                      @db.NVarChar(255)
  work_phone                 String?                      @db.NVarChar(50)
  about_me_fr                String?                      @db.NVarChar(Max)
  about_me_en                String?                      @db.NVarChar(Max)
  website_link               String?                      @db.NVarChar(4000)
  twitter_link               String?                      @db.NVarChar(4000)
  facebook_link              String?                      @db.NVarChar(4000)
  linkedin_link              String?                      @db.NVarChar(4000)
  tiktok_link                String?                      @db.NVarChar(4000)
  cv_link                    String?                      @db.NVarChar(4000)
  address                    String?                      @db.NVarChar(255)
  city                       String?                      @db.NVarChar(255)
  province                   String?                      @db.NVarChar(255)
  country                    String?                      @db.NVarChar(255)
  postal_code                String?                      @db.NVarChar(255)
  mobile_phone               String?                      @db.NVarChar(50)
  date_joined                DateTime?                    @db.Date
  is_active                  Boolean                      @default(true, map: "DF_member_is_active")
  last_active                DateTime?                    @db.Date
  account                    account                      @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "FK_member_account_id")
  faculty                    faculty?                     @relation(fields: [faculty_id], references: [id], map: "FK_member_faculty_id")
  member_type                member_type?                 @relation(fields: [type_id], references: [id], map: "FK_member_type_id")
  current_promotion_strategy current_promotion_strategy[]
  desired_partnership        desired_partnership?
  desired_promotion_strategy desired_promotion_strategy[]
  has_keyword                has_keyword[]
  insight                    insight?
  partnership_member_org     partnership_member_org[]
  problem                    problem[]
  product_member_author      product_member_author[]
}

model member_type {
  id      Int      @id(map: "PK_member_type") @default(autoincrement())
  name_en String   @db.NVarChar(255)
  name_fr String   @db.NVarChar(255)
  member  member[]
}

model org_scope {
  id                  Int                   @id(map: "PK_org_scope") @default(autoincrement())
  name_en             String                @db.NVarChar(255)
  name_fr             String                @db.NVarChar(255)
  desired_partnership desired_partnership[]
  organization        organization[]
}

model org_type {
  id                  Int                   @id(map: "PK_org_type") @default(autoincrement())
  name_en             String                @db.NVarChar(255)
  name_fr             String                @db.NVarChar(255)
  desired_partnership desired_partnership[]
  organization        organization[]
}

model organization {
  id                     Int                      @id(map: "PK_organization") @default(autoincrement())
  name_en                String?                  @db.NVarChar(255)
  name_fr                String?                  @db.NVarChar(255)
  scope_id               Int?
  type_id                Int?
  description            String?                  @db.NVarChar(4000)
  org_scope              org_scope?               @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_organization_scope_id")
  org_type               org_type?                @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_organization_type_id")
  partnership_member_org partnership_member_org[]
  product_partnership    product_partnership[]
}

model problem {
  id        Int     @id(map: "PK_problem") @default(autoincrement())
  member_id Int
  name_en   String? @db.NVarChar(4000)
  name_fr   String? @db.NVarChar(4000)
  member    member  @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_problem_member_id")
}

model promotion_strategy {
  id                         Int                          @id(map: "PK_promotion_strategy") @default(autoincrement())
  name_en                    String?                      @db.NVarChar(255)
  name_fr                    String?                      @db.NVarChar(255)
  current_promotion_strategy current_promotion_strategy[]
  desired_promotion_strategy desired_promotion_strategy[]
}

model partnership_member_org {
  member_id       Int
  organization_id Int
  description     String?      @db.NVarChar(Max)
  member          member       @relation(fields: [member_id], references: [id], onDelete: Cascade, map: "FK_current_partnership_member_id")
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, map: "FK_current_partnership_organization_id")

  @@id([member_id, organization_id], map: "PK_current_partnership")
}

model all_author {
  id         Int      @id(map: "PK_all_author") @default(autoincrement())
  first_name String?  @db.NVarChar(255)
  last_name  String?  @db.NVarChar(255)
  product    product?
}

model product {
  id                    Int                     @id(map: "PK_product") @default(autoincrement())
  title_en              String?                 @db.NVarChar(500)
  title_fr              String?                 @db.NVarChar(500)
  date                  DateTime?               @db.Date
  doi                   String?                 @db.NVarChar(100)
  on_going              Boolean?
  peer_reviewed         Boolean?
  all_author_id         Int?
  product_type_id       Int
  note                  String?                 @db.NVarChar(2000)
  all_author            all_author              @relation(fields: [id], references: [id], onUpdate: NoAction, map: "FK_product_all_author")
  product_type          product_type            @relation(fields: [id], references: [id], onUpdate: NoAction, map: "FK_product_product_type")
  product_member_author product_member_author[]
  product_partnership   product_partnership[]
  product_target        product_target[]
  product_topic         product_topic[]
}

model product_member_author {
  member_id  Int
  product_id Int
  member     member  @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_product_member_author_author_id")
  product    product @relation(fields: [member_id], references: [id], onUpdate: NoAction, map: "FK_product_member_author_product_id")

  @@id([member_id, product_id], map: "PK_product_member_author")
}

model product_partnership {
  organization_id Int
  product_id      Int
  organization    organization @relation(fields: [organization_id], references: [id], onUpdate: NoAction, map: "FK_product_partnership_ong")
  product         product      @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "FK_product_partnership_product")

  @@id([organization_id, product_id], map: "PK_product_partnership")
}

model product_target {
  target_id          Int
  product_id         Int
  product            product            @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "FK_product_target_product_id")
  target_stakeholder target_stakeholder @relation(fields: [target_id], references: [id], onUpdate: NoAction, map: "FK_product_target_target_id")

  @@id([target_id, product_id], map: "PK_product_target")
}

model product_topic {
  topic_id   Int
  product_id Int
  product    product @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "FK_product_topic_product_id")
  topic      topic   @relation(fields: [topic_id], references: [id], onUpdate: NoAction, map: "FK_product_topic_topic_id")

  @@id([topic_id, product_id], map: "PK_product_topic")
}

model product_type {
  id      Int      @id(map: "PK_product_type") @default(autoincrement())
  name_en String?  @db.NVarChar(200)
  name_fr String?  @db.NVarChar(200)
  product product?
}

model target_stakeholder {
  id             Int              @id(map: "PK_target_stakeholder") @default(autoincrement())
  name_fr        String?          @db.NVarChar(300)
  name_en        String?          @db.NVarChar(300)
  product_target product_target[]
}

model topic {
  id            Int             @id(map: "PK_topic") @default(autoincrement())
  name_fr       String?         @db.NVarChar(300)
  name_en       String?         @db.NVarChar(300)
  product_topic product_topic[]
}
